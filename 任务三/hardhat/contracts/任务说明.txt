任务目标
使用 Hardhat 框架开发一个 NFT 拍卖市场。
使用 Chainlink 的 feedData 预言机功能，计算 ERC20 和以太坊到美元的价格。
使用 UUPS/透明代理模式实现合约升级。
使用类似于 Uniswap V2 的工厂模式管理每场拍卖。


任务步骤
1.项目初始化
  使用 Hardhat 初始化项目：
  npx hardhat init
2.安装必要的依赖：
  npm install @openzeppelin/contracts @chainlink/contracts @nomiclabs/hardhat-ethers hardhat-deploy
3.实现 NFT 拍卖市场
4.NFT 合约：
  使用 ERC721 标准实现一个 NFT 合约。
  支持 NFT 的铸造和转移。
5.拍卖合约：
  实现一个拍卖合约，支持以下功能：
  创建拍卖：允许用户将 NFT 上架拍卖。
  出价：允许用户以 ERC20 或以太坊出价。
  结束拍卖：拍卖结束后，NFT 转移给出价最高者，资金转移给卖家。
6.工厂模式：
  使用类似于 Uniswap V2 的工厂模式，管理每场拍卖。
  工厂合约负责创建和管理拍卖合约实例。
7.集成 Chainlink 预言机
8.价格计算：
  使用 Chainlink 的 feedData 预言机，获取 ERC20 和以太坊到美元的价格。
  在拍卖合约中，将出价金额转换为美元，方便用户比较。
9.跨链拍卖：
  使用 Chainlink 的 CCIP 功能，实现 NFT 跨链拍卖。
  允许用户在不同链上参与拍卖。
10.合约升级
UUPS/透明代理：
  使用 UUPS 或透明代理模式实现合约升级。
  确保拍卖合约和工厂合约可以安全升级。
11.测试与部署
  测试：
  编写单元测试和集成测试，覆盖所有功能。
  部署：
  使用 Hardhat 部署脚本，将合约部署到测试网（如 Goerli 或 Sepolia）。
<<<<<<< HEAD





Auction 合约：
处理单个拍卖的完整生命周期（出价、退款、结束、取消）
使用 ReentrancyGuard 防止重入攻击
采用 SafeERC20 确保代币转账安全
实现了完整的状态管理（活跃、完成、取消）
支持出价退款机制，当新出价高于当前最高价时，自动记录前出价者的退款金额


AuctionFactory 合约：
作为拍卖合约的创建者和管理者
维护所有拍卖合约的索引，支持分页查询
按卖家地址分组管理拍卖，方便查询特定卖家的所有拍卖
实现了事件通知机制，便于前端跟踪新拍卖的创建
包含紧急操作功能，允许所有者在特殊情况下取消拍卖


核心特点
工厂模式优势：通过工厂合约统一管理所有拍卖实例，便于索引和查询，降低了用户寻找和跟踪拍卖的难度
安全性：集成了 OpenZeppelin 的安全库，防止重入攻击和不安全的代币转账
灵活性：支持任意 ERC20 代币作为拍卖品，以 ETH 作为出价货币
可扩展性：可以通过工厂合约轻松扩展新功能，如拍卖类型区分、拍卖筛选等
使用时，用户首先通过工厂合约的createAuction方法创建拍卖，然后其他用户可以通过拍卖合约的bid方法参与竞价，拍卖结束后由卖家或任何用户调用endAuction完成交易。
=======
>>>>>>> origin/main
